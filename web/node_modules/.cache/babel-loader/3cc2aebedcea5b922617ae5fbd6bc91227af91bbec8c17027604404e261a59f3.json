{"ast":null,"code":"var _jsxFileName = \"F:\\\\Download\\\\pph\\\\web\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, CircleMarker } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { FaWater } from 'react-icons/fa';\nimport { puneLocations, puneCenter, getRiverColor } from './locations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:8000';\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',\n  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',\n  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png'\n});\nfunction App() {\n  _s();\n  const [predictions, setPredictions] = useState({});\n  const [selected, setSelected] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(() => {\n    const d = new Date();\n    return d.toISOString().slice(0, 10); // YYYY-MM-DD\n  });\n  useEffect(() => {\n    // fetch predictions for selectedDate (server needs month & year)\n    const [y, m] = selectedDate.slice(0, 7).split('-').map(Number); // YYYY-MM-DD -> [YYYY, MM]\n    const fetchAll = async () => {\n      const newPred = {};\n      for (const loc of puneLocations) {\n        try {\n          const res = await fetch(`${API_BASE}/predict`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              river: loc.river,\n              location: loc.name,\n              month: m,\n              year: y\n            })\n          });\n          const body = await res.json();\n          newPred[loc.id] = body.predictions;\n        } catch (e) {\n          newPred[loc.id] = null;\n        }\n      }\n      setPredictions(newPred);\n      // if a selected location exists, refresh it\n      if (selected) {\n        const sel = puneLocations.find(p => p.id === selected.id);\n        setSelected(sel ? {\n          ...sel,\n          prediction: newPred[sel.id]\n        } : null);\n      }\n    };\n    fetchAll();\n  }, [selectedDate]);\n  const handleMarkerClick = loc => {\n    setSelected({\n      ...loc,\n      prediction: predictions[loc.id]\n    });\n  };\n  const toLatLngs = path => path.map(p => [p.latitude, p.longitude]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"brand\",\n        children: [/*#__PURE__*/_jsxDEV(FaWater, {\n          size: 28,\n          color: \"#fff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"RiverWatch\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Water quality predictions for Pune rivers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dot blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 16\n          }, this), \" Mula\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dot teal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 16\n          }, this), \" Mutha\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"dot orange\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 16\n          }, this), \" Mula-Mutha\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"locations\",\n        children: puneLocations.map(loc => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"loc-btn\",\n          onClick: () => handleMarkerClick(loc),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loc-name\",\n            children: loc.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loc-sub\",\n            children: loc.river\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, loc.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n        center: [puneCenter.latitude, puneCenter.longitude],\n        zoom: puneCenter.zoom,\n        className: \"map\",\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), puneLocations.map(loc => /*#__PURE__*/_jsxDEV(CircleMarker, {\n          center: [loc.coordinate.latitude, loc.coordinate.longitude],\n          pathOptions: {\n            color: getRiverColor(loc.river),\n            fillColor: getRiverColor(loc.river),\n            fillOpacity: 0.9\n          },\n          radius: 10,\n          eventHandlers: {\n            click: () => handleMarkerClick(loc)\n          },\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"popup-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: loc.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"muted\",\n                children: loc.river\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"popup-prediction\",\n                children: predictions[loc.id] ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"param-list\",\n                  children: [Object.entries(predictions[loc.id]).filter(([k]) => k !== 'Water Quality').map(([k, v]) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"param\",\n                      children: k\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 39\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"value\",\n                      children: v\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 107,\n                      columnNumber: 73\n                    }, this)]\n                  }, k, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 27\n                  }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"quality\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"param\",\n                      children: \"Water Quality\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"value quality-val\",\n                      children: predictions[loc.id]['Water Quality']\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 93\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Loading predictions...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)\n        }, loc.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detail-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Choose date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            value: selectedDate,\n            onChange: e => setSelectedDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), selected ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selected.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"muted\",\n            children: [selected.river, \" \\u2022 \", selected.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Prediction for \", new Date(selectedDate).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), selected.prediction ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"param-list large\",\n            children: [Object.entries(selected.prediction).filter(([k]) => k !== 'Water Quality').map(([k, v]) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"param\",\n                children: k\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value\",\n                children: v\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 67\n              }, this)]\n            }, k, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 21\n            }, this)), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"quality\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"param\",\n                children: \"Water Quality\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value quality-val\",\n                children: selected.prediction['Water Quality']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 87\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"placeholder\",\n          children: \"Select a location on the map or from the list.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Wsgmo+2U763d4brKXDA6v0Ya4Zg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Marker","Popup","CircleMarker","L","FaWater","puneLocations","puneCenter","getRiverColor","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","App","_s","predictions","setPredictions","selected","setSelected","selectedDate","setSelectedDate","d","Date","toISOString","slice","y","m","split","map","Number","fetchAll","newPred","loc","res","fetch","method","headers","body","JSON","stringify","river","location","name","month","year","json","id","e","sel","find","p","prediction","handleMarkerClick","toLatLngs","path","latitude","longitude","className","children","size","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","center","zoom","url","coordinate","pathOptions","fillColor","fillOpacity","radius","eventHandlers","click","Object","entries","filter","k","v","type","value","onChange","target","description","toLocaleDateString","_c","$RefreshReg$"],"sources":["F:/Download/pph/web/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup, CircleMarker } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { FaWater } from 'react-icons/fa';\r\n\r\nimport { puneLocations, puneCenter, getRiverColor } from './locations';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:8000';\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png',\r\n  iconUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png',\r\n  shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',\r\n});\r\n\r\nfunction App() {\r\n  const [predictions, setPredictions] = useState({});\r\n  const [selected, setSelected] = useState(null);\r\n  const [selectedDate, setSelectedDate] = useState(() => {\r\n    const d = new Date();\r\n    return d.toISOString().slice(0, 10); // YYYY-MM-DD\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    // fetch predictions for selectedDate (server needs month & year)\r\n    const [y, m] = selectedDate.slice(0, 7).split('-').map(Number); // YYYY-MM-DD -> [YYYY, MM]\r\n    const fetchAll = async () => {\r\n      const newPred = {};\r\n      for (const loc of puneLocations) {\r\n        try {\r\n          const res = await fetch(`${API_BASE}/predict`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ river: loc.river, location: loc.name, month: m, year: y })\r\n          });\r\n          const body = await res.json();\r\n          newPred[loc.id] = body.predictions;\r\n        } catch (e) {\r\n          newPred[loc.id] = null;\r\n        }\r\n      }\r\n      setPredictions(newPred);\r\n      // if a selected location exists, refresh it\r\n      if (selected) {\r\n        const sel = puneLocations.find(p => p.id === selected.id);\r\n        setSelected(sel ? { ...sel, prediction: newPred[sel.id] } : null);\r\n      }\r\n    };\r\n    fetchAll();\r\n  }, [selectedDate]);\r\n\r\n  const handleMarkerClick = (loc) => {\r\n    setSelected({ ...loc, prediction: predictions[loc.id] });\r\n  };\r\n\r\n  const toLatLngs = (path) => path.map(p => [p.latitude, p.longitude]);\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <aside className=\"sidebar\">\r\n        <div className=\"brand\">\r\n          <FaWater size={28} color=\"#fff\" />\r\n          <div>\r\n            <h1>RiverWatch</h1>\r\n            <p>Water quality predictions for Pune rivers</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"legend\">\r\n          <div><span className=\"dot blue\"/> Mula</div>\r\n          <div><span className=\"dot teal\"/> Mutha</div>\r\n          <div><span className=\"dot orange\"/> Mula-Mutha</div>\r\n        </div>\r\n\r\n        <div className=\"locations\">\r\n          {puneLocations.map(loc => (\r\n            <button key={loc.id} className=\"loc-btn\" onClick={() => handleMarkerClick(loc)}>\r\n              <div className=\"loc-name\">{loc.name}</div>\r\n              <div className=\"loc-sub\">{loc.river}</div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </aside>\r\n\r\n      <main className=\"main\">\r\n        <MapContainer center={[puneCenter.latitude, puneCenter.longitude]} zoom={puneCenter.zoom} className=\"map\">\r\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n\r\n          {puneLocations.map(loc => (\r\n            <CircleMarker key={loc.id}\r\n              center={[loc.coordinate.latitude, loc.coordinate.longitude]}\r\n              pathOptions={{ color: getRiverColor(loc.river), fillColor: getRiverColor(loc.river), fillOpacity: 0.9 }}\r\n              radius={10}\r\n              eventHandlers={{ click: () => handleMarkerClick(loc) }}\r\n            >\r\n              <Popup>\r\n                <div className=\"popup-card\">\r\n                  <strong>{loc.name}</strong>\r\n                  <div className=\"muted\">{loc.river}</div>\r\n                  <div className=\"popup-prediction\">\r\n                    {predictions[loc.id] ? (\r\n                      <ul className=\"param-list\">\r\n                        {Object.entries(predictions[loc.id]).filter(([k]) => k !== 'Water Quality').map(([k, v]) => (\r\n                          <li key={k}><span className=\"param\">{k}</span><span className=\"value\">{v}</span></li>\r\n                        ))}\r\n                        <li className=\"quality\"><span className=\"param\">Water Quality</span><span className=\"value quality-val\">{predictions[loc.id]['Water Quality']}</span></li>\r\n                      </ul>\r\n                    ) : <div>Loading predictions...</div>}\r\n                  </div>\r\n                </div>\r\n              </Popup>\r\n            </CircleMarker>\r\n          ))}\r\n        </MapContainer>\r\n\r\n        <div className=\"detail-panel\">\r\n          <div className=\"date-control\">\r\n            <label>Choose date</label>\r\n            <input type=\"date\" value={selectedDate} onChange={e => setSelectedDate(e.target.value)} />\r\n          </div>\r\n\r\n          {selected ? (\r\n            <div>\r\n              <h2>{selected.name}</h2>\r\n              <p className=\"muted\">{selected.river} • {selected.description}</p>\r\n              <h3>Prediction for {new Date(selectedDate).toLocaleDateString()}</h3>\r\n              {selected.prediction ? (\r\n                <ul className=\"param-list large\">\r\n                  {Object.entries(selected.prediction).filter(([k]) => k !== 'Water Quality').map(([k, v]) => (\r\n                    <li key={k}><span className=\"param\">{k}</span><span className=\"value\">{v}</span></li>\r\n                  ))}\r\n                  <li className=\"quality\"><span className=\"param\">Water Quality</span><span className=\"value quality-val\">{selected.prediction['Water Quality']}</span></li>\r\n                </ul>\r\n              ) : <div>Loading...</div>}\r\n            </div>\r\n          ) : (\r\n            <div className=\"placeholder\">Select a location on the map or from the list.</div>\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}